#!/usr/bin/env bash

. "$(cd "`dirname "$0"`"; pwd)/common.sh"

# cli args parse :)
( echo "$*" | grep -sqwi "\-d" ) && detached=yes
( echo "$*" | grep -sqwi "\-f" ) && force=yes

# Correct class identifier is required (check with main)!!!
HARNESS_CLASS=com.actionml.HarnessServer

# Harness options passed to the Java service
HARNESS_OPTS="\
-Dlogback.configurationFile=${HARNESS_LOG_CONFIG} \
-DHARNESS_LOG_PATH=${HARNESS_LOG_PATH} \
-Drest-server.host=${REST_SERVER_HOST} \
-Drest-server.port=${REST_SERVER_PORT} \
-Dmongo.host=${MONGO_HOST} \
-Dmongo.port=${MONGO_PORT}"


if [ ! -f "${HARNESS_HOME}/bin/main" ]; then
  echo -e "${RED}Main file '${HARNESS_HOME}/bin/main' not found!${NC}"
  echo -e "${RED}The Harness server must be run after doing a distribution build${NC}"
  exit 1
fi


# Locate harness PID
pid=$(java_pid $HARNESS_CLASS)
harness_running && running=yes

if [ -n "${running}" -a -n "${pid}" -a -z "${force}" ]; then
  # harness seems to be running
  >&2 echo -e "${RED}Harness server seems to be running, pid: ${pid}${NC}"
  >&2 echo -e "${YELLOW}Use -f option to forcefully restart Harness server${NC}"
  exit 1
elif [ -n "${running}" -a -n "${pid}" -a -n "${force}" ]; then
  # force restart
  echo -e "${CYAN}Force Harness server restart${NC}"
  "${HARNESS_HOME}"/bin/harness-stop
  exec "${HARNESS_HOME}"/bin/harness-start "$@"
else
  # start
  [ -z "${detached}" ] || echo -e "${CYAN}Starting Harness server...${NC}"

  if [ -z "${detached}" ]; then
    exec "${HARNESS_HOME}"/bin/main ${HARNESS_OPTS}
  else
    # stderr/stdout log when bin/harness used only
    HARNESS_CLILOG="${HARNESS_CLILOG:-/tmp/harness.log}"
    exec "${HARNESS_HOME}"/bin/main ${HARNESS_OPTS} <&- &> "${HARNESS_CLILOG}" &
  fi

  if ( waitfor_harness ); then
    "${HARNESS_HOME}"/bin/harness-status
  else
    >&2 echo -e "${RED}Harness server startup failed${NC}"
  fi
fi
